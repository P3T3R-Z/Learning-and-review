{
  //"files ": "", /*设置要编译的文件名称*/
  //"include": ["Demo.ts"], /*包含*/
  //"exclude": ["Demo.ts"],   /*忽略*/
  "compilerOptions": { /*设置与编译流程相关的选项*/

    /*基本选项 */
    // "incremental": true,                   /* Enable incremental compilation */
    "target": "es2015",                          /* 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'*/
    "module": "commonjs",                     /* 指定使用模块: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
    // "lib": [],                             /* 指定要包含在编译中的库文件 */
    // "allowJs": true,                       /* 允许编译 javascript 文件 */
    // "checkJs": true,                       /* 报告 javascript 文件中的错误 */
    // "jsx": "preserve",                     /* 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* 生成相应的 '.d.ts' file. */
    // "declarationMap": true,                /*  生成相应的 'd.map' 文件*/
    "sourceMap": true,                     /* 生成相应的'.map' file. */
    // "outFile": "./",                       /* 将输出文件合并为一个文件 */
    "outDir": "./js",                        /* 指定输出目录*/
    "rootDir": "./",                       /* 用来控制输出目录结构 --outDir*/
    // "composite": true,                     /* Enable project compilation */
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
    "removeComments": true,                /* 去注释*/
    // "noEmit": true,                        /* 不生成输出文件*/
    // "importHelpers": true,                 /* 从 tslib 导入辅助工具函数 */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）. */

    /* 严格的类型检查选项 */
    //"strict": true,                           /* 严格模式, 开启后下面相关配置不起作用*/
    // "noImplicitAny": true,                 /* 在表达式和声明上有隐含的 any类型时报错*/
    "strictNullChecks": true,              /* 启用严格的 null undefined 检查 */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* 当 this 表达式值为 any 类型的时候，生成一个错误*/
    // "alwaysStrict": true,                  /* 以严格模式检查每个模块，并在每个文件里加入 'use strict'*/

    /* 额外的检查  */
    // "noUnusedLocals": true,                /* 有未使用的变量时，抛出错误*/
    // "noUnusedParameters": true,            /* 有未使用的参数时，抛出错误 */
    // "noImplicitReturns": true,             /*  并不是所有函数里的代码都有返回值时，抛出错误 */
    // "noFallthroughCasesInSwitch": true,    /* 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）. */

    /* 模块解析选项 */
    // "moduleResolution": "node",            /*选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6) */
    // "baseUrl": "./",                       /* 用于解析非相对模块名称的基目录. */
    // "paths": {},                           /* 模块名到基于 baseUrl 的路径映射的列表 */
    // "rootDirs": [],                        /* 根文件夹列表，其组合内容表示项目运行时的结构内容*/
    // "typeRoots": [],                       /* 包含类型声明的文件列表*/
    // "types": [],                           /* 需要包含的类型声明文件名列表*/
    // "allowSyntheticDefaultImports": true,  /*  允许从没有设置默认导出的模块中默认导入。 */
    "esModuleInterop": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* 指定调试器应该找到 TypeScript 文件而不是源文件的位置 */
    // "mapRoot": "",                         /* 指定调试器应该找到映射文件而不是生成文件的位置*/
    // "inlineSourceMap": true,               /* 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件 */
    // "inlineSources": true,                 /* 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性*/

    /* 其他选项 */
    // "emitDecoratorMetadata": true,         /* 为装饰器提供元数据的支持 */
    "experimentalDecorators": true,        /* 启用装饰器*/

    /* Advanced Options */
    "skipLibCheck": true,                     /* Skip type checking of declaration files. */
    "forceConsistentCasingInFileNames": true  /* Disallow inconsistently-cased references to the same file. */
  }
}
